import argparse
import json
import os
import requests
from subprocess import run

import config


def get_ldap_group(group_name):
    """
    Query the SAS Identities API to retrieve an LDAP group object.
    :param group_name: the name of the LDAP group to retrieve
    :return: a 2-tuple containing the group object (or None, if no such group exists) and a 'group exists' flag
    """
    endpoint = f"/identities/groups/?filter=startsWith(name,'{group_name}')"
    group = call_rest_api(endpoint, "get", **config.DEFAULT_REST_KWARGS)["items"]
    try:
        return group[0], True
    except IndexError:
        return None, False


def get_all_ldap_group_users(group_id):
    """
    Query the SAS Identities API to retrieve all users contained within an LDAP group object's member tree.
    :param group_id: the id of the LDAP group to retrieve users from
    :return: a JSON array of user objects
    """
    endpoint = f"/identities/groups/{group_id}/userMembers?depth=-1"  # recurse to bottom of LDAP group's member tree
    users = call_rest_api(endpoint, "get", **config.DEFAULT_REST_KWARGS)["items"]
    return users


def create_group(group_id, group_name):
    """
    Use the SAS Identities API to create a custom group object.
    :param group_id: the id of the LDAP group being created
    :param group_name: the name of the LDAP group being created
    """
    endpoint = "/identities/groups/"
    kwargs = config.DEFAULT_REST_KWARGS
    kwargs["data"] = {
        "id": group_id,
        "name": group_name
    }
    call_rest_api(endpoint, "post", **kwargs)


def modify_group_membership(http_method, group_id, member_id):
    """
    Modify the membership of an existing group (LDAP or custom).
    :param http_method: either 'put' or 'delete' for addition or deletion, respectively
    :param group_id: the id of the group being modified
    :param member_id: the id of the user being added or removed
    """
    endpoint = f"/identities/groups/{group_id}/userMembers/{member_id}"
    call_rest_api(endpoint, http_method, **config.DEFAULT_REST_KWARGS)


def get_oauth_token():
    """
    Generate a bearer token for a user profile on a SAS Viya services node.
    :return: oath_token: a bearer token
    """

    # Authenticate via the sas-admin CLI:
    username = os.getenv("VIYA_USERNAME")
    password = os.getenv("VIYA_PASSWORD")
    cli_command = f"sas-admin --quiet --sas-endpoint {config.BASE_URL} authenticate login -u {username} -p {password}"
    auth_result = run(cli_command)
    if auth_result.returncode == 1:
        raise ValueError("Authentication failed, please ensure that you have set the VIYA_USERNAME and VIYA_PASSWORD \
                         environment variables. Also verify the value of config.BASE_URL and/or the value of the \
                         --sas-endpoint parameter.")

    # Ingest the credentials.json file generated by the sas-admin CLI:
    with open(config.CREDENTIALS_PATH, "r") as f:
        data = json.loads(f.read())

    # Extract the bearer token generated by the sas-admin CLI and return it:
    oauth_token = f"bearer {data['Default']['access-token']}"
    return oauth_token


def call_rest_api(request_value, request_type, **kwargs):
    """
    Execute an HTTP request against a SAS REST API. In this case, the API in question will always be the Identities API.
    :param request_value: an API endpoint
    :param request_type: an HTTP request type, i.e. 'get'
    :param kwargs: a dictionary of key-value pairs, including data, which contains the request body
    :return: the body of the HTTP response for 'get' and 'head' requests, otherwise nothing
    """

    # Get keyword arguments:
    data = kwargs.pop("data", None)
    content_type = kwargs.pop("content_type", None)
    accept_type = kwargs.pop("accept_type", None)

    # Acquire a bearer token for the SAS Administration CLI:
    if config.OATH_TOKEN is None:
        config.OATH_TOKEN = get_oauth_token()

    # Build the authorization header:
    head = {
        "Content-type": content_type,
        "Accept": accept_type,
        "Authorization": config.OATH_TOKEN
    }

    # Serialize the data string for the request to JSON format:
    json_data = json.dumps(data, ensure_ascii=False)

    # Call the SAS Viya REST API:
    try:
        http_method = getattr(requests, request_type)
        http_result = http_method(config.BASE_URL + request_value, headers=head, data=json_data)
    except AttributeError as error:
        raise ValueError(repr(error) + ": invalid HTTP request_type.")

    # Validate the HTTP response and attempt to return its contents:
    if 400 <= http_result.status_code <= 599:
        raise ValueError(http_result.text)
    else:
        # Don't return anything for the following REST methods:
        if request_type in ["put", "post", "delete"]:
            return

        # Do return something for GET and HEAD:
        else:
            try:
                result = http_result.json()
            except AttributeError:
                try:
                    result = http_result.text
                except AttributeError as error:
                    raise ValueError(repr(error) + ": empty HTTP response.")
    return result


def parse_arguments():
    """
    This method leverages the argparse module to optionally modify the script's configuration variables at run-time.
    """

    # Define command-line arguments:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-se",
        "--sas-endpoint",
        required=False,
        help="Base URL of the Viya Services node in your target deployment."
    )
    parser.add_argument(
        "-cp",
        "--credentials-path",
        required=False,
        help="Local filesystem path to the credentials.json file generated by the sas-admin CLI."
    )
    parser.add_argument(
        "-agf",
        "--auto-group-file",
        required=False,
        help="Location of the file containing all auto-maintained group definitions."
    )

    # Extract command-line argument(s) and update configuration constants:
    args = parser.parse_args()
    if args.sas_endpoint is not None:
        config.BASE_URL = args.sas_endpoint
    if args.credentials_path is not None:
        config.CREDENTIALS_PATH = args.credentials_path
    if args.auto_group_file is not None:
        config.CUSTOM_GROUPS_DEFINITION_FILE = args.auto_group_file
