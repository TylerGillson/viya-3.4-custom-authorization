import argparse
import json
import os
import requests
from subprocess import run

import config


def get_oauth_token():
    """
    Generate a bearer token for a particular SAS Viya services node.
    :return: oath_token: a bearer token
    """

    # Authenticate via the sas-admin CLI:
    username = os.getenv("VIYA_USERNAME")
    password = os.getenv("VIYA_PASSWORD")
    cli_command = f"sas-admin --quiet --sas-endpoint {config.BASE_URL} authenticate login -u {username} -p {password}"
    auth_result = run(cli_command)
    if auth_result.returncode == 1:
        raise ValueError("Authentication failed, please ensure that you have set the VIYA_USERNAME and VIYA_PASSWORD \
                         environment variables. Also verify the value of config.BASE_URL and/or the value of the \
                         --sas-endpoint parameter.")

    # Extract the bearer token generated by the sas-admin CLI and return it:
    with open(config.CREDENTIALS_PATH, "r") as f:
        data = json.loads(f.read())
    return f"bearer {data['Default']['access-token']}"


def call_rest_api(request_value, request_type, **kwargs):

    # Get keyword arguments:
    data = kwargs.pop("data", None)
    content_type = kwargs.pop("content_type", None)
    accept_type = kwargs.pop("accept_type", None)

    # Acquire a bearer token for the SAS Administration CLI:
    if config.OATH_TOKEN is None:
        config.OATH_TOKEN = get_oauth_token()

    # Build the authorization header:
    head = {
        "Content-type": content_type,
        "Accept": accept_type,
        "Authorization": config.OATH_TOKEN
    }

    # Serialize the data string for the request to JSON format:
    json_data = json.dumps(data, ensure_ascii=False)

    # Call the SAS Viya REST API:
    try:
        http_method = getattr(requests, request_type)
        http_result = http_method(config.BASE_URL + request_value, headers=head, data=json_data)
    except AttributeError as error:
        raise ValueError(repr(error) + ": invalid HTTP request_type.")

    # Validate the HTTP response and attempt to return its contents:
    if 400 <= http_result.status_code <= 599:
        raise ValueError(http_result.text)
    else:
        try:
            result = http_result.json()
        except AttributeError:
            try:
                result = http_result.text
            except AttributeError as error:
                raise ValueError(repr(error) + ": empty HTTP response.")
    return result


def parse_arguments():

    # Define command-line arguments:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-se",
        "--sas-endpoint",
        required=False,
        help="Base URL of the Viya Services node in your target deployment."
    )
    parser.add_argument(
        "-agf",
        "--auto-group-file",
        required=False,
        help="Location of the file containing all auto-maintained group definitions."
    )

    # Extract command-line argument(s):
    args = parser.parse_args()

    # Optionally set the config BASE_URL:
    if args.sas_endpoint is not None:
        config.BASE_URL = args.sas_endpoint

    auto_group_filename = config.CUSTOM_GROUPS_DEFINITION_FILE if args.auto_group_file is None else args.auto_group_file
    return auto_group_filename
