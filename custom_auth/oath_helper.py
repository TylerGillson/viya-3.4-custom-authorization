#
# Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the License);
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
import json
import os
from subprocess import run
from custom_auth import config

"""
oath_helper.py
==============

A helper method for authenticating with a remote SAS Viya services node.
It uses the SAS Administration CLI to generate a bearer token, then extracts it from where it was stored on
the local filesystem and returns it as a string.
"""


def get_oauth_token():
    """
    Use the sas-admin CLI to generate a bearer token for a user profile on a SAS Viya services node,
    then parse it out of the credentials.json file.

    Return:
        - oath_token: A bearer token to be used in an HTTP request's authorization header.
    """

    # Authenticate via the sas-admin CLI:
    username = os.getenv("VIYA_USERNAME")
    password = os.getenv("VIYA_PASSWORD")
    cli_command = f"sas-admin --quiet --sas-endpoint {config.BASE_URL} authenticate login -u {username} -p {password}"
    auth_result = run(cli_command)
    if auth_result.returncode == 1:
        raise ValueError("Authentication failed, please ensure that you have set the VIYA_USERNAME and VIYA_PASSWORD \
                         environment variables. Also verify the value of config.BASE_URL and/or the value of the \
                         --sas-endpoint parameter.")

    # Ingest the credentials.json file generated by the sas-admin CLI:
    with open(config.CREDENTIALS_PATH, "r") as f:
        data = json.loads(f.read())

    # Extract the bearer token generated by the sas-admin CLI and return it:
    oauth_token = f"bearer {data['Default']['access-token']}"
    return oauth_token
